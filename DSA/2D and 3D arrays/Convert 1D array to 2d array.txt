class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {
        if(m*n!=original.size())
            return{};
        
        vector<vector<int>> ans(m,vector<int>(n));
        int k=0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                ans[i][j]=original[k];
                    k++;
            }
        }
        return ans;
    }
};

//without using vector

#include <iostream>

class Solution {
public:
    int** construct2DArray(int original[], int size, int m, int n) {
        if (m * n != size)
            return nullptr;

        int** ans = new int*[m];
        int k = 0;

        for (int i = 0; i < m; ++i) {
            ans[i] = new int[n];
            for (int j = 0; j < n; ++j) {
                ans[i][j] = original[k];
                k++;
            }
        }
        return ans;
    }
};

int main() {
    Solution solution;
    int original[] = {1, 2, 3, 4, 5, 6};
    int m = 2, n = 3;

    int** result = solution.construct2DArray(original, sizeof(original) / sizeof(original[0]), m, n);

    // Printing the result
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            std::cout << result[i][j] << " ";
        }
        std::cout << std::endl;
    }

    // Don't forget to free the allocated memory
    for (int i = 0; i < m; ++i) {
        delete[] result[i];
    }
    delete[] result;

    return 0;
}
